### 데이터 타입이란?

- 값의 종류
- JS(ES6)는 7개의 데이터 타입 제공 ⇒ 원시 타입/객체 타입 분류

| 구분      | 데이터 타입 | 설명                                                |
| --------- | ----------- | --------------------------------------------------- |
| 원시 타입 | 숫자        | 숫자, 정수와 실수 구분 없이 하나의 숫자 타입만 존재 |
|           | 문자열      | 문자열                                              |
|           | 불리언      | 논리적 참/거짓                                      |
|           | undefined   | var 키워드로 선언된 변수에 암묵적으로 할당되는 값   |
|           | null        | 값이 없다는 것을 의도적으로 명시할 때 사용하는 값   |
|           | 심벌        | ES6에서 추가된 7번째 타입                           |
| 객체 타입 |             | 객체, 함수, 배열 등                                 |

- 타입에 따라 생성한 목적과 용도가 상이하며, 확보해야할 메모리 공간의 크기도 다름. 당연히 읽어 들여 해석하는 방식도 다름.

### 숫자 타입이란?

- C나 자바와 다르게 하나의 숫자 타입만 존재 ⇒ 모든 수를 실수로 처리 (정수로 표시해도 사실은 실수!!)

\*\* 표현할 수 있는 값

- Infinity : 양의 무한대
- -Infinity : 음의 무한대
- NaN : 산술 연산 불가(not-a-number)

\*\* js는 대소문자를 구별하므로 NaN을 NAN, Nan, nan과 같이 표현하면 에러 발생 —> 값이 아닌 식별자로 해석

ex. var x = nan; // 참조에러 —> 숫자 타입도 문자열 타입도 아님. 문자열을 따옴표로 감싸지 않으면 js 엔진은 키워드나 식별자 같은 토큰으로 인식

### 문자열 타입이란?

- 텍스트 데이터를 나타내는데 사용
- 0개 이상의 16비트 유니코드 문자(UTF-16)의 집합으로 전 세계 대부분의 문자 표현 가능
- 작은따옴표(’ ‘), 큰따옴표(” “), 백틱(` `)으로 텍스트를 감싸며, 가장 일반적인 표기법은 작은 따옴표 사용
- 따옴표로 문자열을 감싸지 않으면 공백 문자 포함 불가
- 문자열은 원시 타입이며, 변경 불가능한 값(immutable value)

### 템플릿 리터럴이란?

- 멀티라인 문자열, 표현식 삽입, 태그드 템플릿 등 편리한 문자열 처리 기능 제공
- 런타임에 일반 문자열로 변환되어 처리됨
- 일반 문자열과 비슷해 보이지만 백틱(` `)을 사용해 표현

```jsx
var template = `Template literal`;
console.log(template); // Template literal
```

1. **멀티라인 문자열**

   \*\* 일반 문자열 내에서는 줄바꿈(개행)이 허용되지 않음

   - 일반 문자열 내에서 줄바꿈 등의 공백을 표현하려면 백슬래시(\)로 시작하는 이스케이프 시퀀스 사용

   | 이스케이프 시퀀스 | 의미                                                                            |
   | ----------------- | ------------------------------------------------------------------------------- |
   | \0                | Null                                                                            |
   | \b                | 백스페이스                                                                      |
   | \f                | 폼 피드 : 프린터로 출력할 경우 다음 페이지의 시작 지점으로 이동                 |
   | \n                | 개행(LF, Line Feed) : 다음 행으로 이동                                          |
   | \r                | 개행(CR, Carriage Return) : 커서를 처음으로 이동                                |
   | \t                | 탭(수평)                                                                        |
   | \v                | 탭(수직)                                                                        |
   | \uXXXX            | 유니코드. 예를 들어 ‘\u0041’은 ‘A’, ‘\uD55C’는 ‘한’, ‘\u{1F600}’는 이모지 이다. |
   | \’                | 작은따옴표                                                                      |
   | \”                | 큰따옴표                                                                        |
   | \\                | 백슬래시                                                                        |

   **백틱(``)을 사용하는 템플릿 리터럴 내에서는 이스케이프 시퀀스를 사용하지 않고도 줄바꿈이 허용되며, 모든 공백도 있는 그대로 적용**

2. **표현식 삽입**

   \*\* 문자열은 문자열 연산자 + 를 사용해서 피연산자 중 하나 이상이 문자열인 경우 문자열 연결. 그 외에는 덧셈 연산자로 동작

   - **템플릿 리터럴 내**에서 표현식 삽입을 하려면 ${ }으로 표현식을 감쌈
     → 표현식의 평가 결과가 문자열이 아니어도 타입 강제 변환되어 삽입

```jsx
var first = 'Ung-mo';
var last = 'Lee';

console.log(`My Name is ${first}` ${last}.`); // My Name is Ung-mo Lee.
```

- 표현식 삽입은 반드시 템플릿 리터럴 내에서 사용해야함
  일반 문자열에서의 표현식 삽입은 문자열로 취급

```jsx
console.log(`1 + 2 = ${1 + 2}`); // 1 + 2 = 3
console.log("1 + 2 = ${1 + 2}"); // 1 + 2 = ${1 z= 2}
```

### 불리언 타입이란?

- 불리언 타입의 값은 논리적 참, 거짓을 나타내는 true와 false
- 참과 거짓으로 구분되는 조건에 의해 프로그램의 흐름을 제어하는 조건문에서 자주 사용

### undefined 타입이란? \*추후 8.2절

- undefined 타입의 값은 undefined가 유일
- var 키워드로 선언한 변수는 암묵적으로 undefined로 초기화
  = 변수 선언에 의해 확보된 메모리 공간을 처음 할당이 이워질 때까지 빈 상태로 두지 않고 js 엔진이 undefined로 초기화
  ⇒ 값을 할당하지 않은 변수 참조 시 undefined 반환
- **변수에 값이 없다는 것을 명시하고 싶을 때는 undefined를 할당하는 것이 아니라 null 할당**

### null 타입이란?

- null 타입의 값은 null이 유일 (js는 대소문자를 구별하므로 Null, NULL 등과 다름)
- 변수에 값이 없다는 것을 의도적으로 명시(의도적 부재)할 때 사용
- 변수에 null을 할당하는 것은 변수가 이전에 참조하던 값을 더이상 참조하지 않겠다는 의미
  → js 엔진은 누구도 참조하지 않는 메모리 공간에 대해 가비지 콜렉션 수행
- 함수가 유효한 값을 반환할 수 없는 경우 명시적으로 null 반환

### 심벌 타입이란? \*추후 33장

- ES6에서 추가된 7번째 타입으로, 변경 불가능한 원시 타입의 값
- 심벌 값은 다른 값과 중복되지 않는 유일무이란 값
  ⇒ 주로 이름이 충돌할 위험이 없는 객체의 유일한 프로퍼티 키를 만들기 위해 사용
- 심벌 이외의 원시 값은 리터럴을 통해 생성하지만 심벌은 Symbol 함수를 호출해서 생성 (생성된 심벌 값은 외부 노출 X, 다른 값과 절대 중복 X)

### 객체 타입이란? \*추후 11장

- js를 이루고 있는 거의 모든 것이 객체 (지금까지 본 6가지 데이터 타입 외 전부)

### **데이터 타입이 필요한 이유**

1. 값을 저장할 때 확보해야 하는 메모리 공간의 크기를 결정하기 위해
2. 값을 참조할 때 한 번에 읽어 들여야 할 메모리 공간의 크기를 결정하기 위해
3. 메모리에서 읽어 들인 2진수를 어떻게 해석할지 결정하기 위해

### 동적 타이핑이란?

[동적 타입 언어와 정적 타입 언어]

- 정적 타입 언어 (C, C++, JAVA, Kotlin, Go, Haskell, Rust, Scala 등)

  - 변수를 선언할 때 변수에 할당할 수 있는 값의 종류, 즉 데이터 타입을 사전에 선언 ⇒ 명시적 타입 선언
  - 변수의 타입을 변경할 수 없으며, 변수에 선언한 타입에 맞는 값만 할당 가능
  - 컴파일 시점에 타입 체크 수행 → 타입 체크를 통과하지 못했다면 에러를 발생시키고 프로그램 실행 자체를 막음
    ⇒ 타입의 일관성을 강제함으로써 더욱 안정적인 코드의 구현을 통해 런타임에 발생하는 에러 Down!

- JS → 정적 타입 언어와 구분하기 위해 동적 타입 언어라고 함
  - 변수를 선언할 때 타입 선언 X
  - var, let, const 키워드를 사용해 변수 선언
  - 미리 선언한 데이터의 값만 할당할 수 있는 것이 아니라, 어떠한 데이터 타입의 값이라도 자유롭게 할당 가능
    \*\* typeof 연산자로 null 값을 반환하면 object로 반환되니 주의!!
- JS의 변수는 선언이 아닌 할당에 의해 타입이 결정(타입 추론)
- 재할당에 의해 변수의 타입이 언제든지 동적으로 변화 가능 ⇒ 동적 타이핑
- 동적 타입 언어 (JS, 파이썬, PHP, 루비, 리스프, 펄 등)

- **동적 타입 언어의 단점**
  - 변수 값이 언제든지 변경될 수 있기 때문에 복잡한 프로그램에서는 변화하는 변수 값 추적이 어려울 수 있음
  - 변수의 타입이 고정되어 있지 않고 동적으로 변하기 때문에 값의 변경에 의해 타입도 언제든지 변경될 수 있음
    ⇒ 값을 확인하기 전에는 타입을 확신할 수 없다!!!
  - 개발자의 의도롸 상관없이 js 엔진에 의해 암묵적으로 타입이 자동으로 변환되기도 함
    ⇒ 동적 타입 언어는 유연성은 높지만 신뢰성 Down!!

---

<aside>
⚠️ **변수를 사용할 때 주의할 사항**

- 변수 값은 재할당에 의해 언제든지 변경될 수 있으며 이로 인해 타입을 잘못 예측해 오류가 발생할 가능성이 크다. 변수의 개수가 많을 수록 오류가 발생할 확류로 높아지기 때문에 변수는 꼭 필요한 경우에 한해 제한적으로 사용한다.
- 변수의 유효 범위(스코프)가 넓을 수록 변수로 인해 오류가 발생할 확률이 높아지므로, 유효 범위를 최대한 좁게 만들어 변수의 부작용을 억제해야 한다.
- 어디서든 참조/변경 가능한 전역 변수는 의도치않게 값이 변경될 가능성이 높고 다른 코드에 영향을 줄 가능성도 높기 때문에 최대한 사용하지 않도록 한다.
- 변수보다는 상수를 사용해 값의 변경을 억제한다.
- 변수 이름은 변수의 목적이나 의미를 파악할 수 있도록 네이밍한다.

</aside>
