### 값(value)이란?

- 식(표현식)이 평가되어 생성된 결과
  ex. var sum = 10 + 20; // 변수 sum에는 식이 평가되어 값 30이 할당된다
- 모든 값은 데이터 타입을 가지며, 메모리에 2진수, 즉 비트의 나열로 저장 → 메모리에 저장된 값은 데이터 타입에 따라 다르게 해석 가능
- 변수란 하나의 값을 저장하기 위해 확보한 메모리 공간 자체 또는 그 메모리 공간을 식별하기 위해 붙인 이름이며, **변수에 할당되는 것은 값**

\*\* 값은 다양한 방법으로 생성될 수 있으며, 식 뿐만 아니라 가장 기본적인 방법인 리터럴을 사용할 수 있음

### 리터럴(literal)이란?

- 코드 ⇒ 사람이 이해할 수 있는 문자(아라비아 숫자, 알파벳, 한글 등) 또는 미리 약속된 기호(’ ’, “ ”, ., [ ], { }, 등)를 사용해 값을 생성하는 표기법(notation)
- 리터럴은 값을 생성하기 위해 미리 약속한 표기법
  \*\* 리터럴은 평가되어 값 생성
- js 엔진은 코드가 실행되는 시점인 런타임에 리터럴을 평가해서 값 생성

### 표현식(expression)이란?

- 값으로 평가될 수 있는 모든 문(statement)
- 표현식이 평가되면 새로운 값을 생성하거나 기존 값 참조
- 표현식과 표현식이 평가된 값을 동등한 관계 (= 동치)

\*\* 산술 연산자의 좌항과 우항에는 숫자 값이 위치해야하며, 숫자 값으로 평가될 수 있는 표현식도 숫자 값 대신 사용 가능

### 문(statement)이란?

- 프로그램을 구성하는 기본 단위이자 최소 실행 단위
  문 —— 프로그래밍(문을 작성 순서에 맞게 나열) ——> 프로그램(문의 집합)
- 문은 여러 토큰으로 구성
- 문 = 명령문 ?
- 컴퓨터에 내리는 명령
- 문이 실행되면 명령이 실행되고 일이 일어남
- 구분 : 선언문, 할당문, 조건문, 반복문 등
- 세미콜론(;)은 문의 종료를 나타냄

### **표현식인 문과 표현식이 아닌 문**

- 표현식은 문의 일부일 수도 있고 그 자체로 문이 될 수도 있음

---

> **[표현식과 문을 구별하는 방법]**
>
> 표현식인 문 : 값으로 평가될 수 있는 문 → 변수에 할당 가능
>
> 표현식이 아닌 문 : 값으로 평가될 수 없는 문 → 변수에 할당 불가능
>
> ex. 변수 선언문은 값으로 평가될 수 없으므로 표현식이 아닌 문이며, 할당문은 값으로 평가될 수 있으므로 표현식인 문
>
> \*\* 표현식인 문과 아닌 문을 구별하는 간단하고 명료한 방법? 변수에 할당해 보기!
