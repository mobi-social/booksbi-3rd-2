# 타입 변환과 단축 평가

## 타입 변환이란?

-   값의 타입은 개발자 의도에 따라 다른 타입으로 변환할 수 있다
-   개발자가 의도적으로 값의 타입을 변환하는 것을 명시적 타입 변환 또는 타입 캐스팅이라 한다.

```
var x = 10;

// 명시적 타입 변환
// 숫자를 문자열로 타입 캐스팅한다
var str = x.toString();
console.log(typeof str, str);

// x 변수의 값이 변경된 것은 아니다
console.log(typeof x, x);
```

-   개발자의 의도와는 상관없이 표현식을 평가하는 도중에 자바스크립트 엔진에 의해 암묵적으로 타입이 자동 변환되기도 한다.
-   이를 암묵적 타입 변환 또는 타입 강제 변환이라 한다.

```
var x = 10;

var str = x + '';
console.log(typeof str, str); // string 10

// x 변수의 값이 변경된 것은 아니다
console.log(typeof x, x); // number 10
```

### 암묵적 타입 변환

```
// 피연산자가 모두 문자열 타입이어야 하는 문맥
'10' + 2 // -> '102'

// 피연산자가 모두 숫자 타입이어야 하는 문맥
5 * '10' // -> 50

// 피연산자 또는 표현식이 불리언 타입이어야 하는 문맥
!0 // -> true
if(1){}
```

-   문자열 타입으로 변환

    -   +연산자는 피연산자 중 하나 이상이 문자열이므로 문자열 연결 연산자로 동작한다.

-   숫자 타입으로 변환

    ```
    1 - '1' // => 0
    1 * '10' // => 10
    1 / 'one' // => NaN
    ```

-   불리언 타입으로 변환

    ```
    if('') console.log('1');
    if(ture) console.log('2');
    if(0) console.log('3');
    if('str') console.log('4');
    if(null) console.log('5');

    // 2 4
    ```

    -   자바스크립트 엔진은 불리언 타입이 아닌 값을 Truthy 값(참으로 평가되는 값) 또는 Falsy 값(거짓으로 평가되는 값)으로 구분한다.

### 명시적 타입 변환

-   문자열 타입으로 변환

    -   문자열 타입이 아닌 값을 문자열 타입으로 변환하는 방법은 다음과 같다
        1.  String 생성자 함수를 new 연산자 없이 호출하는 방법
        2.  Object.prototype.toString 메서드를 사용하는 방법
        3.  문자열 연결 연산자를 이용하는 방법

-   숫자 타입으로 변환

    -   숫자 타입이 아닌 값을 숫자 타입으로 변환하는 방법은 다음과 같다
        1.  Number 생성자 함수를 new 연산자 없이 호출하는 방법
        2.  parseInt, parseFloat 함수를 사용하는 방법(문자열만 숫자 타입으로 변환 가능)
        3.  +단항 산술 연산자를 이용하는 방법
        4.  \*산술 연산자를 이용하는 방법

-   불리언 타입으로 변환
    -   불리언 타입이 아닌 값을 불리언 타입으로 변환하는 방법은 다음과 같다
        1.  Boolean 생성자 함수를 New 연산자 없이 호출하는 방법
        2.  !부정 논리 연산자를 두 번 사용하는 방법

### 단축평가

-   논리 연산자를 사용한 단축 평가
    |단축 평가 표현식|평가 결과|
    |-------------|--------|
    | ture || anything | true |
    | false || anything | anything |
    | true && anything | anything |
    | false && anything | false |

-   옵셔널 체이닝 연산자

    -   ES11에서 도입된 옵셔널 체이닝 연산자 ?.는 좌항의 피연산자가 null 또는 undefined인 경우 undefined를 반환하고, 그렇지 않으면 우항의 프로퍼티 참조를 이어간다

-   null 병합 연산자
    -   ES11에서 도입된 null 병합 연산자 ??는 좌항의 피연산자가 null 또는 undefined인 경우 우항의 피연산자를 반환하고, 그렇지 않으면 좌항의 피연산자를 반환한다
    -   null 병합 연산자 ??는 변수에 기본값을 설정할 때 유용하다
