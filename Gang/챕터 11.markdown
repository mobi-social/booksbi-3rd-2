# 원시 값과 객체의 비교

-   원시 타입과 객체 타입은 크게 세가지 측면에서 다르다
    -   원시 타입의 값, 즉 원시 값은 변경 불가능한 값이다. 이에 비해 객체(참조) 타입의 값, 즉 객체는 변경 가능한 값이다.
    -   원시 값을 변수에 할당하면 변수(확보된 메모리 공간)에는 실제 값이 저장된다.이에 비해 객체를 변수에 할당하면 변수(확보된 메모리 공간)에는 참조 값이 저장된다
    -   원시 값을 갖는 변수를 다른 변수에 할당하면 원본의 원시 값이 복사되어 전달된다. 이를 값에 의한 전달이라 한다.
    -   객체를 가리키는 변수를 다른 변수에 할당하면 원본의 참조 값이 복사되어 잔달된다. 이를 참조에 의한 전달이라 한다.

## 원시 값

### 변경 불가능한 값

-   원시 타입의 값, 즉 원시 값은 변경 불가능한 값이다.
-   변경 불가능하다는 것은 변수가 아니라 값에 대한 진술이다.

    -   "원시 값은 변경 불가능하다"는 말은 원시 값 자체를 변경할 수 없다는 것이지 변수 값을 ㅈ변경할 수 없다는 것이 아니다.
    -   변수는 언제든지 재할당을 통해 변수 값을 변경(교체)할 수 있다.
    -   변수의 상대 개념인 상수는 재할당이 금지된 변수를 말한다.

-   원시 값은 변경 불가능한 값이기 때문에 값을 직접 변경할 수 없다.
-   변수 값을 변경하기 위해 원시 값을 재할당 하면 새로운 메모리 공간을 확보하고 재할당한 값을 저장한 후, 변수가 참조하던 메모리 공간 주소를 변경한다.
-   값의 이러한 특성을 불변성이라 한다
    -   분변성을 갖는 원시 값을 할당한 변수는 재할당 이외에 변수 값을 변경할 수 있는 방법이 없다.

### 문자열과 불변성

-   유사 배열 객체

    -   마치 배열처럼 인덱스로 프로퍼티 값에 접근할 수 있고 length 프로퍼티를 갖는 객체를 말한다.
        문자열은 마치 배열처럼 인덱스를 통해 각 문자에 접근할 수 있으며, length 프로퍼티를 갖기 때문에 유사 배열 객체이고
        for문으로 순회할 수도 있다

        ```
          var str = 'string';
          // 문자열은 유사 배열이므로 배열과 유사하게 인덱스를 사용해 각 문자에 접근할 수 있다.
          console.log(str[0]); // s

          // 원시 값인 문자열이 객체러럼 동작한다.
          console.log(str.length); // 6
          console.log(str.toUpperCase()); // STRING
        ```

    ```
    var str = 'string';

    // 문자열은 유사 배열이므로 배열과 유사하게 인덱스를 사용해 각 문자에 접근할 수 있다.
    // 하지만 문자열은 원시 값이므로 변경할 수 없다. 이때 에러가 발생하지 않는다.
    str[0] = 'S';
    consol.log(str); // string
    ```

### 값에 의한 전달

```
var score = 80;
var copy = score;

console.log(score); // 80
console.log(copy); // 80

score = 100;

console.log(score); // 100
console.log(copy); // ?
```

변수에 원시 값을 갖는 변수를 할당하면 할당받는 변수(copy)에는 할당되는 변수(score)의 원시 값이 복사되어 전달된다.
이를 "값에 의한 전달"이라 한다.

```
var score = 80;
// copy 변수에는 score 변수의 값이 80이 복사되어 할당된다.
var copy = score;
console.log(score, copy); // 80 80
console.log(score === copy); // true
```

score 변수와 copy 변수의 값 80은 다른 메모리 공간에 저장된 별개의 값이다.

## 객체

-   객체는 프로퍼티의 개수가 정해져 있지 않으며, 동적으로 추가되고 삭제할 수 있다. 또한 프로퍼티의 값에도 제약이 없다
    따라서 객체는 원시 값과 같이 확보해야 할 메모리 공간의 크기를 사전에 정해 둘 수 없다.

### 자바스크립트 객체의 관리 방식

-   자바스크립트 객체는 프로퍼티 키를 인덱스로 사용하는 해시 테이블(해시 테이블은 연관 배열.map,dictionary, lookup table이라 부르기도 한다)
    이라고 생각할 수 있다. 대부분의 자바스크립트 엔진은 해시 테이블과 유사하지만 높은 성능을 위해 일반적인 해시 테이블보다 나은 방법으로 객체를 구현한다.

### 변경 가능한 값

-   객체(참조) 타입의 값
-   객체는 변경 가능한 값이다.

    -   원시 값을 할단한 변수가 기억하는 메모리 주소를 통해 메모리 공간에 접근하면 원시 값에 접근할 수 있다.
    -   원시 값을 할당ㅇ한 변수는 원시 값 자체를 값으로 갖는다
    -   객체를 할당한 변수가 기억하는 메모리 주소를 통해 메모리 공간에 접근하면 "참조 값"에 접근할 수 있다

-   원시 값은 변경 불가능한 값이므로 원시 값을 갖는 변수의 값을 변경하려면 재할당 외에는 방법이 없다.
-   하지만 객체는 변경 가능한 값이다.
-   객체를 할당한 변수는 재할당 없이 객체를 직접 변경할 수 있다.
-   재할당 없이 프로퍼티를 동적으로 추가할 수도 있고 프로퍼티 값을 갱실할 수도 있으며 프로퍼티 자체를 삭제할 수도 있다.

-   객체는 구조적 단점에 따른 부작용이 있다.
    -   여러 개의 식별자가 하나의 객체를 공유할 수 있다는 것이다.

### 얕은 복사와 깊은 복사

-   객체를 프로퍼티 값으로 갖는 객체의 경우 얕은 복사는 한 단계까지만 복사하는 것을 말하고 깊은 복사는 객체에 중첩되어 있는 객체까지 모두 복사하는 것을 말한다

```
const o = { x: {y: 1}}

// 얕은 복사
const c1 = {...o}; // 스프레드 문법
console.log(c1 === o); // false
console.log(c1.x === o.x) // true

// lodash의 cloneDeep을 사용한 깊은 복사
// "npm install lodash"로 lodash를 설치한 후, Node.js 환경에서 실행
const _ = require('lodash');
// 깊은 복사
const c2 = _.cloneDeep(o);
console.log(c2 === 0); // false
console.log(c2.x === o.x); // false
```

얕은 복사와 깊은 복사로 생성된 객체는 원본과는 다른 객체다.
즉, 원본과 복사본은 참조 값이 다른 별개의 객체이다.
하지만 얕은 복사는 객체에 중처보디어 있는 객체의 경우 참조 값을 복사하고 깊은 복사는 객체에 중처보디어 있는 객체까지 모두 복사해서 원시 값처럼 완전한 복사본을 만든다는 차이가 있다.

### 참조에 의한 전달

-   여러 개의 식별자가 하나의 객체를 공유할 수 있다는 것이 무엇을 의미하는지, 이로 인해 어떤 부작용이 발생하는지 확인해보자

```
var person = {
    name: "Sol"
};

// 참조 값을 복사(얕은 복사)
var copy = person;
```

객체를 가리키는 변수(원본,person)를 다른 변수(사본,copy)에 할당하면 원본의 "참조 값이 복사되어 전달"된다.
이를 "참조에 의한 전달"이라 한다.

-   "값에 의한 전달"과 "참조에 의한 전달"은 식별자가 기억하는 메모리 공간에 저자오디어 있는 값을 복사해서 전달한다는 면에서 동일하다.
-   자바스크립트에는 "참조에 의한 전달"은 존재하지 않고 "갑에 의한 전달"만이 존재한다고 말할 수 있다.
