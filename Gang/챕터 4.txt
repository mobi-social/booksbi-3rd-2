### 변수란 ?

-   하나의 값을 저장하기 위해 확보한 메모리 공간 자체 또는 그 메모리 공간을 식별하기 위해 붙인 이름

<aside>
💡 변수에 여러 개의 값을 저장하는 방법
- 변수는 하나의 값을 저장하기위한 메커니즘이다.
- 여러 개의 값을 저장하려면 여러 개의 변수를 사용해야 한다.
- 단, 배열이나 객체 같은 자료구조를 사용하면 관련이 있는 여러 개의 값을 그룹화해서 하나의 값처럼 사용할 수 있다.

</aside>

```jsx
// 변수는 하나의 값을 저장하기 위한 수단이다.
var userId = 1;
var userName = "sol";

// 객체나 배열 같은 자료구조를 사용하면 여러 개의 값을 하나로 그룹화해서 하나의 값처럼 사용할 수 있다.
var user = { id: 1, name: "sol" };

var users = [
    { id: 1, name: "sol" },
    { id: 2, name: "jin" },
];
```

-   변수에 값을 저장하는 것을 **할당(assignment)**라고 한다.
-   변수에 저장된 값을 읽어 들이는 것을 **참조(reference)**라고 한다.

### 식별자?

-   어떤 값을 구별해서 식별할 수 있는 고유한 이름을 말한다.
-   식별자는 값이 아니라 메모리 주소를 기억하고 있다.
      <aside>
      💡 - 식별자라는 용어는 변수 이름에만 국한해서 사용하지 않는다.
      - 변수, 함수, 클래스 등의 이름은 모두 식별자다.
      - 식별자인 변수 이름으로는 메모리 상에 존재하는 변수 값을 식별할 수 있고
      - 함수 이름으로는 메모리 상에 존재하는 함수를 식별할 수 있다.
      메모리 상에 존재하는 어떤 값을 식별할 수 잇는 이름은 모두 식별자다.
      
      - 변수, 함수, 클래스 등의 이름과 같은 식별자는 네이밍 규칙을 준수해야 하며,
      - **선언(declaration)**에 의해 자바스크립트 엔진에 식별자의 존재를 알린다**.**
      
      </aside>


### 변수 선언?

-   변수를 사용하려면 반드시 선언이 필요하다.
-   변수를 선언 할 때는 var, let, const 키워드를 사용한다.

<aside>
💡 아직 살펴보지 않았지만 var 키워드는 여러 단점이 있다.

var 키워드의 여러 단점 중에서 가장 대표적인 것이 블록 레벨 스코프(block-level scope)를 지원하지 않고 함수 레벨 스코프(function-level scope)를 지원한다는 것이다.

이로 인해 의도치 않게 전역 변수가 선언되어 심각한 부작용이 발생하기도 한다.

</aside>

-   var 키워드를 사용한 변수 선언은 선언 단계와 초기화 단계가 동시에 진행된다.
-   var score;는 선언 단계를 통해 변수 이름 score를 등록하고, 초기화 단계를 통해 score 변수에 암묵적으로 undefined를 할당해 초기화한다.

<aside>
💡 일반적으로 **초기화**란 변수가 선언된 이후 최초로 값을 할당하는 것을 말한다.

</aside>

### 변수 선언의 실행 시점과 변수 호이스팅

```jsx
// ex
console.log(score); // undefined

var score; // 변수 선언문
```

-   js 코드는 인터프리터에 의해 한 줄씩 순처적으로 실행되므로 console.log가 먼저 실행되고
    순차적으로 다음 줄에 있는 코드를 실행한다.
-   undefined가 출력되는 이유는
    -   변수 선언이 소스코드가 한 줄씩 순차적으로 실행되는 시점,
    -   즉 런타임이 아니라 그 이전 단계에서 먼저 실행되기 때문이다.

### 값의 할당

-   변수에 값을 할당(대입,저장)할 때는 할당 연산자 = 를 사용한다.
-   할당 연산자는 우변의 값을 좌변의 변수에 할당한다.

```jsx
var score; // 변수 선언
score = 80; // 값의 할당
```

<aside>
💡 주의 할 점
변수 선언은 소스코드가 순차적으로 실행되는 시점인 런타임 이전에 먼저 실행되지만 
값의 할당은 소스코드가 순차적으로 실행되는 시점인 런타임에 실행된다.

</aside>

```jsx
console.log(score); // undefined

var score; // 변수 선언
score = 80; // 값의 할당

console.log(score); // 80
```

### 값의 재할당

-   이미 값이 할당되어 있는 변수에 새로운 값을 또다시 할당하는 것을 말한다.

```jsx
var score = 80; // 값의 할당
score = 90; // 값의 재할당
```

-   만약 값을 재할당할 수 없어서 변수에 저장된 값을 변경할 수 없다면 **변수가 아니라 상수**라 한다.

### 식별자 네이밍 규칙

-   식별자는 다음과 같은 네이밍 규칙을 준수해야한다.
    -   식별자는 특수문자를 제외한 문자, 숫자, 언더스코어(\_), 달러 기호를 ($) 포함할 수 있다.
    -   단, 식별자는 특수문자를 제외한 문자, 언더스코어(\_), 달러 기호($)로 시작해야한다. 숫자로 시작하는 것은 허용하지 않는다.
    -   예약어는 식별자로 사용할 수 없다.

<aside>
💡 네이밍 컨벤션
- 하나 이상의 영어 단어로 구성된 식별자를 만들 때 가독성 좋게 단어를 한눈에 구분하기 위해 규정한 명명 규칙이다.

다음과 같은 4가지 유형의 네이밍 컨벤션이 자주 사용된다.

</aside>

```jsx
// 카멜케이스(camelCase)
var firstName;

// 스네이크 케이스(snake_case)
var first_name;

// 파스칼 케이스(PascalCase)
var FirstName;

// 헝가리언 케이스(typeHumgarianCase)
var strFirstName; // type + identifier
var $elem = document.getElementById("myId"); // DOM노드
var observable$ = fromEvent(document, "click"); // RxJS 옵저버블
```
