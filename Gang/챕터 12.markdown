# 함수란?

-   자바스크립트에서 가장 중요한 핵심 개념이다.
-   자바스크립트를 정화히 이해하고 사용하기 위해 필해갈 수 없는 핵심 중의 핵심이다.
-   함수는 일련의 과정을 문으로 구현하고 코드 블록으로 감싸서 하나의 실행 단위로 정의한 것이다.
-   변수를 "매개 변수", 입력을 "인수", 출력을 "반환값"이라 한다.
-   함수는 "함수 정의"를 통해 생성한다.
-   함수는 다양한 방법으로 정의할 수 있다
    ```
    function add(x, y){
        return x + y;
    }
    ```
    -   함수 정의만으로 함수가 실행되는 것은 아니다
    -   인수를 매개변수를 통해 함수에 전달하면서 함수의 실행ㅇ르 명시적으로 지시해야 한다
    -   이를 "함수 호출"이라 한다.

## 함수를 사용하는 이유

-   코드의 재사용성 측면에서 유용하기 때문
-   코드 중복을 억제하고 재사용성을 높이는 함수는 유지보수의 편의성을 높이고 실수를 줄여 코드의 신뢰성을 높인다.
-   적절한 함수 이름은 함수의 내부 코드를 이해하지 않고도 함수의 역할을 파악할 수 있게 돕는다. 이는 코드의 가독성을 높인다.
-   사람이 이해할 수 있는 코드, 즉 가독성이 좋은 코드가 좋은 코드다.

## 함수 리터럴

| 구성 요소     | 설명                                                                                                                          |
| ------------- | ----------------------------------------------------------------------------------------------------------------------------- |
| 함수 이름     | 함수 이름은 식별자다. 따라서 식별자 네이밍 규칙을 준수해야 한다                                                               |
|               | 함수 이름은 함수 몸체 내에서만 참조할 수 있는 식별자다.                                                                       |
|               | 함수 이름은 생략할 수 있다. 이름이 있는 함수를 기명함수, 이름이 없는 함수를 무명/익명 함수라 한다                             |
| 매개변수 목록 | 0 개이상의 매개변수를 소괄호로 감싸고 쉼표로 구분한다.                                                                        |
|               | 각 매개변수에는 함수를 호출할 때 지정한 인수가 순서대로 할당된다. 즉, 매개변수 목록은 순서에 의미가 있다.                     |
|               | 매개변수는 함수 몸체 내에서 변수와 동일하게 취급된다. 따라서 매개변수도 변수와 마찬가지로 식별자 네이밍 규칙을 준수해야 한다. |
| 함수 몸체     | 함수가 호출되었을 때 일괄적으로 실행될 문들을 하나의 실행 단위로 정의한 코드 불록이다.                                        |
|               | 함수 몸체는 함수 호출에 의해 실행된다.                                                                                        |

-   함수는 객체다
    -   함수는 객체지만 일반객체와는 다르다
    -   일반 객체는 호출할 수 없지만 함수는 호출할 수 있다

## 함수 정의

| 함수 정의 방식       | 예시                                              |
| -------------------- | ------------------------------------------------- |
| 함수 선언문          | `function add(x,y){return x + y;}`                |
| 함수 표현식          | `varadd = function(x,y){return x + y;}`           |
| Function 생성자 함수 | `var add = new Function('x','y','return x + y');` |
| 화살표 함수(ES6)     | `var add = (x, y)=> x + y;`                       |

### 함수 선언문

-   함수 선언문은 함수 리터럴과 형태가 동일하다
-   단, 함수 리터럴은 함수 이름을 생략할 수 있으나 함수 선언문은 함수 이름을 생략할 수 없다.
-   함수 선언문은 표현식이 아닌 문이다.
-   자바스크립트 엔진은 생성된 함수를 호출하기 위해 함수 이름과 동일한 이름의 식별자를 암묵적으로 생성하고, 거기에 함수 객체를 할당한다.
-   함수는 함수 이름으로 후출하는 것이 아니라 함수 객체를 가리키는 식별자로 호출한다.

### 함수 표현식

-   함수는 값처럼 변수에 할당할 수도 있고 프로퍼티 값이 될 수도 있으며 배열의 요소가 될 수도있다.
-   이처럼 값의 성질을 갖는 객체를 "일급 객체"라 한다.
-   자바스크립트의 함수는 일급 객체다.

### 함수 생성 시점과 함수 호이스팅

-   함수 표현식으로 정의한 함수는 함수 표현식 이전에 호출할 수 없다
-   이는 함수 선언문으로 정의한 함수와 함수 표현식으로 정의한 함수의 생성 시점이 다르기 때문이다.

-   함수 선언문이 코드의 선두로 끌어 올려진 것처럼 동작하는 자바스크립트 고유의 특징을 함수 호이스팅이라 한다.

-   함수 표현식은 변수에 할당되는 값이 함수 리터럴인 문이다.
-   변수 할당문의 값은 할당문이 실행되는 시점
-   런타이메 평가되므로 함수 표현식의 함수 리터럴도 할당문이 실행되는 시점에 평가되어 함수 객체가 된다.
-   함수 표현식으로 함수를 정의하면 함수 호이스팅이 발생하는 것이 아니라 변수 호이스팅이 발생한다.

### Function 생성자 함수

-   `Function` 생성자 함수로 함수를 생성하는 방식은 일반적이지 않으며 바람직 하지도 않다.
-   `Function`생성자 함수로 생성한 함수는 클로저를 생허사지 않는 등, 함수 선언문이나 함수 표현식으로 생성한 함수와 다르게 동작한다

### 화살표 함수

-   화살표 함수는 항상 익명 함수로 정의한다.
-   화살표 함수는 생성자 함수로 사용할 수 없다.

## 함수 호출

### 매개변수와 인수

-   함수를 실행하기 위해 필ㅛ한 값을 함수 외붸서 함수 내부로 전달할 필요가 있는 경우, 매변수(인자)를 통해 인수를 전달한다
-   인수는 값으로 평가될 수 있는 표현식이어야 한다.
-   인수는 함수를 호출할 때 지정하며, 개수와 타입에 제한이 없다.

### 매개변수의 최대 개수

-   ECMAScript 사양에서는 매개변수의 최대 개수에 대해 명시적으로 제한하고 있지 않다.
-   물리적 한계는 있으므로 자바스크립트 엔진마다 매개변수의 최대 개수에 대한 제한이 있겠지만 충분히 많은 매개변수를 지정할 수 있다.
-   함수의 매개변수는 코드를 이해하는 데 방해되는 요소이므로 이상적인 매개변수 개수는 0개이며 적을수록 좋다.
-   이상적인 함수는 한 가지 일만 해야 하며 가급적 작게 만들어야 한다.

### 반환문

-   함수는 return 키워드와 표현식(반환값)으로 이뤄진 반환문을 사용해 실행 결과를 함수 외부로 반환(return)할 수 있다.
-   함수는 return 키워드를 사용해 자바스크립트에서 사용 가능한 모든 값을 반환할 수 있다.
-   함수 호출은 표현식이다.
-   반환문은 두 가지 역할을 한다.
    -   반환문은 함수의 실행을 중단하고 함수 몸체를 빠져나간다.
    -   반환문은 return 키워드 뒤에 오는 표현식을 평가해 반환한다.

## 참조에 의한 전달과 외부 상태의 변경

-   함수를 호출하면서 매개변수에 ㄱ밧을 전달하는 방식을 값에 의한 호출, 참조에 의한 호출로 구별해 부르는 경우도 있으나 동작 방식은 값에 의한 전달, 참조에 의한 전달과 동일하다.

```jsx
// 매개변수 primitive는 원시 값을 전달받고, 매개변수 obj는 객체를 전달받는다.
function changeVal(primitive, obj) {
    primitive += 100;
    obj.name = "Kim";
}
// 외부 상태
var num = 100;
var person = { name: "sol" };

console.log(num); // 100
console.log(person); // {name: 'sol'};

// 원시 값은 값 자체가 복사되어 전달되고 객체는 참조 값이 복사되어 전달된다
changeVal(num, person);

// 원시 값은 원본이 훼손되지 않는다.
console.log(num); // 100

// 객체는 원본이 훼손된다.
console.log(person); // {name: 'sol'}
```

-   원시 타입 인수를 전달받은 매개변수 primitive의 경우, 원시 값은 변경 불가능한 값이므로 직접 변경할 수 없기 때문에 재할당을 통해 할당된 원시 값을 새로운 원시 값으로 교체했다.
-   객체 타입 인수를 전달받은 매개변수 obj의 경우, 객체는 변경 가능한 값이므로 직접 변경할 수 있기 때문에 재할당 없이 직접 할당된 객체를 변경했다.

## 다양한 함수의 형태

### 즉시 실행 함수

-   함수의 정의와 동시에 즉시 호출되는 함수를 즉시 실행 함수라고 한다.
-   즉시 실행 함수는 단 한 번만 호출되며 다시 호출할 수 없다.

```jsx
// 익명 즉시 실행 함수
(function () {
    var a = 3;
    var b = 5;
    return a * b;
})();
```

-   즉시 실행 함수는 함수 이름이 없는 익명 할수를 사용하는 것이 일반적이다.
-   함수 이름이 있는 기명 즉시 실행 함수도 사용할 수 있다.
-   그룹 연산자 (...) 내의 기명 함수는 함수 선언문이 아니라 함수 리터럴로 평가되며 함수 이름은 함수 몸체에서만 참조할 수 있는 식별자이므로 즉시 실행 함수를 다시 호출할 수 는 없다.

```jsx
// 기명 즉시 실행 함수
(function foo() {
    var a = 3;
    var b = 5;
    return a * b;
})();
foo(); // ReferenceError: foo is not defined
```

-   즉시 실행 함수는 반드시 그룹 연산자 (...)로 감싸야 한다.
-   즉시 실행 함수도 일반 함수처럼 값을 반환할 수 있고 인수를 전달할 수도 있다.

```jsx
// 즉시 실행 함수도 일반 함수처럼 값을 반환할 수 있다.
var res = (function () {
    var a = 3;
    var b = 5;
    return a * b;
})();

console.log(res); // 15

// 즉시 실행 함수에도 일반 함수처럼 인수를 전달할 수 있다.
res =
    (function (a, b) {
        return a * b;
    },
    (3, 5));
console.log(res); //15
```

-   즉시 실행 함수 내에 코드를 모아 두면 혹시 있을 수도 있는 변수나 함수 이름의 충돌을 방지할 수 있다.

### 재귀 함수

-   함수가 자기 자신을 호출하는 것을 재귀 호출이라 한다.
-   재귀 함수는 자기 자신을 호출하는 행위, 즉 재귀 호출을 수행하는 함수를 말한다.

```jsx
function countdown(n) {
    if (n < 0) return;
    console.log(n);
    countdown(n - 1); // 재귀 호출
}
countdown(10);
```

-   이처럼 자기 자신을 호출하는 재귀 함수를 사용하면 반복되는 처리를 반복문 없이 구현할 수 있다.
-   재귀 함수는 자신을 무한 재귀 호출한다.
-   따라서 재귀 함수 내에는 재귀 호출을 멈출 수 있는 탈출 조건을 반드시 만들어야 한다.

### 중첩 함수

-   함수 내부에 정의된 함수를 중첩 함수 또는 내부 함수라 한다.
-   중첩 함수를 포함하는 함수는 외부 함수라 부른다.
-   호이스팅으로 인해 혼한이 발생할 수 있으므로 if 문이나 for 문 등의 코드 블록에서 함수 선언문을 통해 함수르 ㄹ정희하는 것은 바람직하지 않다.

### 콜백 함수

```jsx
// 외부에서 전달받은 f를 n만큼 반복 호출한다.
function repeat(n, f) {
    for (var i = 0; i < n; i++) {
        f(i); // i를 전달하면서 f를 호출
    }
}

var logAll = function (i) {
    console.log(i);
};

// 반복 호출할 함수를 인수로 전달한다.
repeat(5, logAll); // 0 1 2 3 4

var logOdds = function (i) {
    if (i % 2) console.log(i);
};

// 반복 호출할 함수를 인수로 전달한다.
repeat(5, logOdds); // 1 3
```

-   함수의 매개변수를 통해 다른 함수의 내부로 전달되는 함수를 콜백 함수라고 하며,
    매개 변수를 통해 함수의 외부에서 콜백 함수를 전달받은 함수를 고차 함수라고한다.

-   고차 함수는 콜백함수를 자신의 일부분으로 합성한다.
-   고차 함수는 매개변수를 통해 전달받은 콜백 함수의 호출 시점을 결정해서 호출한다.
-   콜백 함수는 고차 함수에 의해 호출되며 이때 고차 함수는 필요에 따라 콜백 함수에 인수를 전달할 수 있다.
