## 데이터 타입

-   자바스크립트(ES6)는 7개의 데이터 타입을 제공한다.

| 구분      | 데이터 타입          | 설명                                                |
| --------- | -------------------- | --------------------------------------------------- |
| 원시 타입 | 숫자(number) 타입    | 숫자. 정수와 실수 구분 없이 하나의 숫자 타입만 존재 |
|           | 문자열(string) 타입  | 문자열                                              |
|           | 불리언(boolean) 타입 | 논리적 참(true)과 거짓(false)                       |
|           | undefined 타입       | var 키워드로 선언된 변수에 암묵적으로 할당되는 값   |
|           | null 타입            | 값이 없다는 것을 의도적으로 명시할 때 사용하는 값   |
|           | 심범(symbol) 타입    | ES6에서 추가된 7번째 타입                           |
| 객체 타입 |                      | 객체, 함수, 배열 등                                 |

### 숫자 타입

-   자바스크립트는 하나의 숫자 타입만 존재한다
-   ECMAScript 사양에 따르면 숫자 타입의 값은 배정밀도 64비트 부동소수점 형식을 따른다
-   모든 수를 실수로 처리하며, 정수만 표현하기 위한 데이터 타입이 별도로 존재하지 않는다

```jsx
// 모두 숫자 타입이다
var integer = 10; // 정수
var double = 10.12; // 실수
var negative = -20; // 음의 정수
```

-   정수 실수, 2진수 8진수, 16진수 리터럴은 모두 메모리에 배정밀도 64비트 부동소수점 형식의 2진수로 저장된다
-   표현하기 위한 데이터 타입을 제공하지 않기 때문에 이들 값을 참조하면 모두 10진수로 해석된다

```jsx
var binary = 0b01000001; // 2진수
var octal = 0o101; // 8진수
var hex = 0x41; // 16진수

// 표기법만 다를 뿐 모두 같은 값이다
console.log(binary); // 65
console.log(octal); // 65
console.log(hex); // 65
```

-   숫자 타입은 추가적으로 세 가지 특별한 값도 표현할 수 있다.
    -   Infinity: 양의 무한대
    -   -Infinity: 음의 무한대
    -   NaN: 산술 연산 불가(not-a-number)
        -   자바스크립트 엔진은 NAN, Nan, nan을 값이 아닌 식별자로 해석한다

### 문자열 타입

-   텍스트 데이터를 나타내는데 사용한다
-   문자열은 0개 이상의 16비트 유니코드 문자(UTF-16)의 집합으로 전 세계 대부분의 문자를 표현할 수 있다
-   작은따옴표(’’), 큰따옴표(””), 또는 백틱(``)으로 텍스트를 감싼다

### 템플릿 리터럴

-   ES6부터 새로운 문자열 표기법이 도입되었다.
-   멀티라인 문자열, 표현식 삽입, 태그드 템플릿 등 편리한 문자열 처리 기능을 제공한다
-   런타임에 일반 문자열로 변환되어 처리된다
-   백틱(``)을 사용한다

```jsx
var template = `Template literal`;
console.log(template);
```

### 멀티라인 문자열

-   일반 문자열 내에서는 줄바꿈이 허용되지 않는다
-   템플릿 리터럴 내에서는 이스케이프 시퀀스를 사용하지 않고도 줄바꿈이 허용되며, 모든 공백도 있는 그대로 적용된다

### 표현식 삽입

-   문자열은 문자열 연산자 +를 사용해 연결할 수 있다.
-   -   연산자는 피연산자 중하나 이상이 문자열인 경우 문자열 연결 연산자로 동작한다
-   템플릿 리터럴 내에서는 표현식 삽입을 통해 간단히 문자열을 삽입할 수 있다.
-   표현식을 사용하려면 ${}으로 표현식을 감싼다

### 불리언 타입

-   값은 논리적 참, 거짓을 나타내는 true와 false뿐이다.

```jsx
var foo = true;
console.log(foo); // true

foo = false;
console.log(foo); // false
```

### undefined 타입

-   undefined 타입의 값은 undefined가 유일하다.
-   변수를 선언한 이후 값을 할당하지 않은 변수를 참조하면 undefined가 반환된다.

### null 타입

-   null 타입의 값은 null이 유일하다
-   자바스크립트는 대소문자를 구별하므로 null은 Null, NULL 등과 다른다
-   null은 변수에 값이 없다는 것을 의도적으로 명시할 때 사용한다

### 심벌 타입

-   ES6에서 추가된 7번째 타입으로, 변경 불가능한 원시 타입의 값이다
-   다른 값과 중복되지 않는 유일무이한 값이다
-   주로 이름이 충돌할 위험이 없는 객체의 유일한 프로퍼티 키를 만들기 위해 사용한다

```jsx
// 심벌 값 생성
var key = Symbol('key');
console.log(typeof key) // symbol

// 객체 생성
var obj = {];

// 이름이 충돌할 위험이 없는 유일무이한 값인 심벌을 프로퍼티 키로 사용한다.
obj[key] = 'value';
console.log(obj[key]); // value
```

### 객체 타입

-   자바스크립트를 이루고 있는 거의 모든 것이 객체
-   위에서 살펴본 6가지의 데이터 타입 이외의 값은 모두 객체 타입이다.

### 동적 타이핑

-   동적 타입 언어와 정적 타입 언어
    -   정적 타입 언어
        -   변수를 선언할 때 변수에 할당할 수 있는 값의 종류
        -   데이터 타입을 사전에 선언해야 한다 이를 명시적 타입 선언이라 한다
        -   정적 타입 언어는 변수의 타입을 변경할 수 없으며, 변수에 선언한 타입에 맞는 값만 할당할 수 있다.
        -   컴파일 시점에 **타입 체크**를 수행한다
          <aside>
          💡 타입 체크
          : 선언한 데이터 타입에 맞는 값을 할당했는지 검사하는 처리
          
          </aside>


자바 스크립트의 변수는 선언이 아닌 할당에 의해 타입이 결정(타입 추론)된다.

그리고 재할당에 의해 변수의 타입은 언제든지 동적으로 변할 수 있다

이러한 특징을 **동적 타이핑** 이라하며 정적 타입 언어와 구별하기 위해 **동적 타입 언어**라 한다

-   동적 타입 언어와 변수
    -   변수에 어떤 데이터 타입의 값이라도 자유롭게 할당할 수 있다.
