# 객체 리터럴

## 객체란?

-   원시 타입의 값
-   원시 값은 변경 불가능한 값이지만 객체 타입의 값, 즉 객체는 병경 가능한 값이다

-   프로퍼티: 객체의 상태를 나타내는 값
-   메서드: 프로퍼티를 참조하고 조작할 수 있는 동작

-   객체 리터럴에 의한 객체 생성

    -   객체 리터럴
    -   Object 생성자 함수
    -   생성자 함수
    -   Object.create 메서드
    -   클래스(ES6)

-   프로퍼티

    -   객체는 프로퍼티의 집합이며, 프로퍼티는 기와 값으로 구성된다

    ```
    var person = {
        // 프로퍼티 키는 name, 프로퍼티 값은 'Kim'
        name: 'Kim'
    }
    ```

    -   프로퍼티 키: 빈 문자열을 포함하는 모든 문자열 또는 심벌 값
    -   프로퍼티 값: 자바스크립트에서 사용할 수 있는 모든 값

    -   식별자 네이밍 규칙을 따르지 않는 이름에는 반드시 따옴표를 사용해야 한다

-   메서드

    -   프로퍼티 값이 함수일 경우 일반 함수와 구분하기 위해 메서드라 부른다
    -   객체에 묶여 있는 함수를 의미한다

    ```
    var circle = {
        radius: 5, // 프로퍼티

        // 원의 지름
        getDiameter: function() { // 메서드
            return 2 * this.radius; // this는 circle을 가리킨다
        }
    }
    ```

-   프로퍼티 접근

    -   프로퍼티에 접근하는 방법은 다음과 같이 두 가지다

        -   마침표 프로퍼티 접근 연산자(.)를 사용하는 마침표 표기법
        -   대괄호 프로퍼티 접근 연산자([...])를 사용하는 대괄호 표기법

    -   대괄호 표기법을 사용하는 경우
        -   대괄호 프로퍼티 접근 연산자 내부에 지정하는 프로퍼티 키는 반드시 따옴표로 감싼 문자열이어야 한다.
        -   객체에 존재하지 않는 프로퍼티에 접근하면 undefined를 반환한다.

-   프로퍼티 값 갱신

    -   이미 존재하는 프로퍼티에 값을 할당하면 프로퍼티 값이 갱신된다.

-   프로퍼티 동적 생성

    -   존재하지 않는 프로퍼티에 값을 할당하면 프로퍼티가 동적으로 생성되어 추가되고 프로퍼티 값이 할당된다

-   프로퍼티 삭제

    -   delete 연산자는 객체의 프로퍼티를 삭제한다
    -   delete 연산자의 피연산자는 프로퍼티 값에 접근할 수 있는 표현식이어야 한다.
    -   존재하지 않는 프로퍼티를 삭제하면 아무런 에러 없이 무시된다

-   ES6에서 추가된 객체 리터럴의 확장 기능
    -   프로퍼티 축약 표현
        -   객체 리터럴의 프로퍼티는 프로퍼티 키와 프로퍼티 값으로 구성된다
        -   프로퍼티 값은 변수에 할당된 값, 즉 식별자 표현식일 수도 있다.
