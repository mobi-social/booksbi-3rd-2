## 연산자

-   하나 이상의 표현식을 대상으로 산술, 할당, 비교, 논리. 타입, 지수연산 등을 수행해 하나의 값을 만든다.
-   이때 연산의 대상을 피연산자라 한다
    -   피연산자는 값으로 평가될 수 있는 표현식 이어야한다.

```jsx
// 산술 연산자
5 * 4; // -> 20

// 문자열 연결 연산자
"My name is " + "Kim"; // -> My name is Kim

// 할당 연산자
color = "red"; // -> 'red'

// 비교 연산자
3 > 5; // -> false

// 논리 연산자
true && false; // -> false

// 타입 연산자
typeof "Hi"; // -> string
```

## 연산자

하나 이상의 표현식을 대상으로 산술, 할당, 비교, 논리. 타입. 지수 연산 등을 수행해 하나의 값을 만든다.

-   산술 연산자
    -   피연산자를 대상으로 수학적 계산을 수행해 새로운 숫자 값을 만든다.
    -   불가능한 경우, NaN을 반환한다.
    -   피연산자의 개수에 따라 이항 산술 연산자와 단항 산술 연산자로 구분할 수 있다.
        -   이항 산술 연산자
            -   2개의 피연산자를 산술 연산하여 숫자 값을 만든다.
            -   피연산자의 값을 변경하는 부수 효과가 없다
            | 이항 산술 연산자 | 의미   | 부수 효과 |
            | ---------------- | ------ | --------- |
            | +                | 덧셈   | X         |
            | -                | 뺄셈   | X         |
            | \*               | 곱셈   | X         |
            | /                | 나눗셈 | X         |
            | %                | 나머지 | X         |
        ### 단항 산술 연산자
        | 단항 산술 연산자 | 의미                                                | 부수 효과 |
        | ---------------- | --------------------------------------------------- | --------- |
        | ++               | 증가                                                | O         |
        | - -              | 감소                                                | O         |
        | +                | 어떠한 효과도 없다. 음수를 양수로 반전하지도 않는다 | X         |
        | -                | 양수를 음수로, 음수를 양수로 반전한 값을 반환한다   | X         |
        -   주의할 점
            -   이항 산술 연산자와는 달리 증가/감소(++/- -) 연산자는 피연산자의 값을 변경하는 부수 효과가 있다는 것
        ```jsx
        var x = 1;

        // ++ 연산자는 피연산자의 값을 변경하는 암묵적 할당이 이뤄진다
        x++; // x = x + 1;
        console.log(x); // 2

        // -- 연산자는 피연산자의 값을 변경하는 암묵적 할당이 이뤄진다/
        x--; // x = x - 1;
        console.log(x); // 1
        ```
        -   증가/감소 연산자는 위치에 의미가 있다
        ```jsx
        var x = 5,
            result;

        // 선할당 후증가(postfix increment operator)
        result = x++;
        console.log(result, x); // 5 6

        // 선증가 후할당(prefix increment operator)
        result = ++x;
        console.log(result, x); // 7 7

        // 선할당 후감소(postfix decrement operator)
        result = x--;
        console.log(result, x); // 7 6

        // 선감소 후할당(prefix decrement operator)
        result = --x;
        console.log(result, x); // 5 5
        ```
        -   숫자 타입이 아닌 피연산자에 + 단항 연산자를 사용하면 피연산자를 숫자 타입으로 변환하여 반환한다
        ```jsx
        var x = "1";

        // 문자열을 숫자로 타입 변환한다.
        console.log(+x); // 1
        // 부수 효과는 없다
        console.log(x); // '1'

        // 불리언 값을 숫자로 타입 변환한다.
        x = true;
        console.log(+x); // 1
        // 부수 효과는 없다
        console.log(x); // true

        // 불리언 값을 숫자로 타입 변환한다.
        x = false;
        console.log(+x); // 0
        // 부수 효과는 없다.
        console.log(x); // false

        // 문자열을 숫자로 타입 변환할 수 없으므로 NaN을 반환한다.
        x = "Hello";
        console.log(+x); // NaN
        // 부수 효과는 없다.
        console.log(x); // "Hello"
        ```
        -   -   단항 연산자는 피연산자의 부호를 반전한 값을 반환한다.
        ### 문자열 연결 연산자
        -   -   연산자는 피연산자 중 하나 이상이 문자열인 경우 문자열 연결 연산자로 동작한다.
        ```jsx
        // 문자열 연결 연산자
        "1" + 2; // -> '12'
        1 + "2"; // -> '12'

        // 산술 연산자
        1 + 2; // -> 3

        // true는 1로 타입 변환된다.
        1 + true; // -> 2

        // false는 0으로 타입 변환된다.
        1 + false; // -> 1

        // null은 0으로 타입 변환된다.
        1 + null; // -> 1

        // undefined는 숫자로 타입 변환되지 않는다.
        +undefined; // -> NaN
        1 + undefined; // -> NaN
        ```
        -   자바스크립트 엔진은 암묵적으로 불리언 타입의 값인 true를 숫자 타입인 1로 타입을 강제로 변환한 후 연산을 수행한다
        -   이를 **암묵적 타입 변환** 또는 **타입 강제 변환** 이라고 한다.

### 할당 연산자

-   우항에 있는 피연사자의 평가 경과를 좌항에 있는 변수에 할당한다.
-   좌항의 변수에 값을 할당하므로 변수 값이 변하는 부수 효과가 있다

| 할당 연산자 | 예      | 동일 표현  | 부수 효과 |
| ----------- | ------- | ---------- | --------- |
| =           | x = 5   | x = 5      | O         |
| +=          | x += 5  | x = x + 5  | O         |
| -=          | x -= 5  | x = x - 5  | O         |
| \*=         | x \*= 5 | x = x \* 5 | O         |
| /=          | x /= 5  | x = x / 5  | O         |
| %=          | x %= 5  | x = x % 5  | O         |

```jsx
var x;

// 할당문은 표현식인 문이다.
console.log((x = 10)); // 10
```

-   할당문은 값으로 평가되는 표현식인 문으로서 할당된 값으로 평가된다.
-   (동일 변수 연쇄 할당)

```jsx
var a, b, c;

// 연쇄 할당. 오른쪽에서 왼쪽으로 진행
// 1. c = 0 : 0으로 평가됨
// 2. b = 0 : 0으로 평가됨
// 3. a = 0 : 0으로 평가됨
a = b = c = 0;

console.log(a, b, c); // 0 0 0
```

### 비교 연산자

-   좌항과 우항의 피연산자를 비교한 다음 그 결과를 불리언 값으로 반환한다.
-   동등/일치 비교 연산자

| 비교 연산자 | 의미        | 사례    | 설명                     | 부수 효과 |
| ----------- | ----------- | ------- | ------------------------ | --------- |
| ==          | 동등 비교   | x == y  | x와 y의 값이 같음        | X         |
| ===         | 일치 비교   | x === y | x와 y의 값과 타입이 다름 | X         |
| ≠           | 부동등 비교 | x ≠ y   | x와 y의 값이 다름        | X         |
| ≠=          | 불일치 비교 | x ≠= y  | x와 y의 값과 타입이 다름 | X         |

-   **동등 비교(==) 연산자는 좌항과 우항의 피연산자를 비교할 때 먼저 암묵적 타입 변환을 통해 타입을 일치시킨 후 같은 값인지 비교한다.**
-   **일치비교(===) 연산자는 좌항과 우항의 피연산자가 타입도 같고 값도 같은 경우에 한아여 true를 반환한다.**
    -   일치 비교 연산자에서 주의할 것은 NaN이다
        -   NaN은 자신과 일치하지 않는 유일한 값이다.
        -   따라서 숫자가 NaN인지 조사하려면 빌트인 함수인 Number.isNaN을 사용한다.
        -   숫자 0도 주의. 자바스크립트에는 양의 0과 음의 0이 있는데 이들을 비교하면 true를 반환한다.
-   부동등 비교 연산자(≠)와 불일치 비교 연산자(≠=)는 각각 동등 비교 연산자와 일치 비교 연산자의 반대 개념이다.

### 대소 관계 비교 연산자

-   피연산자의 크기를 비교하여 불리언 값을 반환한다.

| 대소 관계 비교 연산자 | 예제  | 설명                  | 부수 효과 |
| --------------------- | ----- | --------------------- | --------- |
| >                     | x > y | x가 y보다 크다        | X         |
| <                     | x < y | x가 y보다 작다        | X         |
| ≥                     | x ≥ y | x가 y보다 크거나 같다 | X         |
| ≤                     | x ≤ y | x가 y보다 작거나 같다 | X         |

### 삼항 조건 연산자

-   조건식의 평가 결과에 따라 반환할 값을 결정한다.
    조건식 ? 조건식이 true일 때 반환할 값 : 조건식이 false일 때 반환할 값
    ```jsx
    score >= 60 === false;

    var result = score >= 60 ? "pass" : "fail";

    score >= 60 === true;
    ```
    -   **삼항 조건 연산자 표현식은 값으로 평가할 수 있는 표현식인 문이다.**

### 논리 연산자

-   우항 좌항의 피연산자(부정 논리 연산자의 경우 우항의 피연산자)를 논리 연산 한다.

| 논리 연산자 | 의미        | 부수 효과 |
| ----------- | ----------- | --------- | ---------- | --- |
|             |             |           | 논리합(OR) | X   |
| &&          | 논리곱(AND) | X         |
| !           | 부정(NOT)   | X         |

```jsx
// 논리합(||) 연산자
true || true; // true
true || false; // true
false || true; // true
false || false; // false

// 논리곱(&&) 연산자
true && true; // true
true && false; // false
false && true; // false
false && false; // false

// 논리 부정(!) 연산자
!true; // false
!false; // true
```

### 드 모르간의 법칙

-   논리 연산자로 구성된 복잡한 표현식은 가독성이 좋지 않아 한눈에 이해하기 어려울 때가 있다.
-   이러한 경우 드 모르간의 법칙을 활용하면 복잡한 표현식을 좀 더 가독성 좋은 표현식으로 변환할 수 있다.

```jsx
!(x || y) === (!x && !y);
!(x && y) === (!x || !y);
```

### 쉼표 연산자

-   왼쪽 피연산자부터 차례대로 피연산자를 평가하고 마지막 피연산자의 평가가 끝나면 마지막 피연산자의 평가 결과를 반환한다.

```jsx
var x, y, z;

(x = 1), (y = 2), (z = 3); // 3
```

### 그룹 연산자

-   소괄호 (’()’)로 피연산자를 감싸는 그룹 연산자는 자신의 피연산자인 표현식을 가장 먼저 평가한다.
-   연산자 우선순위가 가장 높다

```jsx
10 * 2 + 3; // 23

// 그룹 연산자를 사용하여 우선순위 조절
10 * (2 + 3); // 50
```

### typeof 연산자

-   데이터 타입을 문자열로 반환한다.
-   7가지 문자열 “string”,”number”,”boolean”,”undefined”,”symbol”,”object”,”function” 중 하나를 반환한다.

```jsx
typeof ""; // "string"
typeof 1; // "number"
typeof NaN; // "number"
typeof true; // "boolean"
typeof undefined; // "undefined"
typeof Symbol(); // "symbol"
typeof null; // "object"
typeof []; // "object"
typeof {}; // "object"
typeof new Date(); // "object"
typeof /test/gi; // "object"
typeof function () {}; // "function"
```

-   null 값을 연산해 보면 “null”이 아닌 “object”로 반환한다.
-   값이 null 타입인지 확인할 땐 일치 연산자(===)를 사용하자.
-   선언하지 않은 식별자를 typeof로 연산하면 에러를 발생하지 않고 undefined를 반환한다.

### 지수 연산자

-   ES7에서 도입된 지수 연산자는 좌항의 피연산자를 밑으로, 우항의 피연산자를 지수로 거듭 제곱하여 숫자 값을 반환한다.

```jsx
2 ** 2; // 4
2 ** 2.5; // 5,6568...
2 ** 0; // 1
2 ** -2; // 0.25
```

-   지수 연산자가 도입되기 이전에는 Math.pow 메서드를 사용했다.
-   음수를 거듭제곱의 밑으로 사용해 계산하려면 다음과 같이 괄호로 묶어야한다.

```jsx
-5 ** 2; //error

(-5) ** 2; // 25
```

-   지수 연산자는 다른 산술 연산자와 마찬가지로 할당 연산자와 함께 사용할 수 있다.
-   지수 연산자는 이상 연산자 중에서 우선순위가 가장 높다.

### 그 외 연산자

| 연산자     | 개요                                                        | 참고                           |
| ---------- | ----------------------------------------------------------- | ------------------------------ |
| ?.         | 옵셔널 체이닝 연산자                                        | 9.4.2절 “옵셔널 체이닝 연산자” |
| ??         | null 병합 연산자                                            | 9.4.3절 “null 병합 연산자”     |
| delete     | 프로퍼티 삭제                                               | 10.8절 “프로퍼티 삭제”         |
| new        | 생성자 함수를 호출할 때 사용하여 인스턴스를 생성            | 17.2.6절 “new 연산자”          |
| instanceof | 좌변의 객체가 우변의 생성자 함수와 연결된 인스턴스인지 판별 | 19.10절 “instanceof 연산자”    |
| in         | 프로퍼티 존재 확인                                          | 19.13.1절 “in 연산자”          |

### 연산자 우선 순위

| 우선순위 | 연산자                                                                            |
| -------- | --------------------------------------------------------------------------------- | --- | --- |
| 1        | ( )                                                                               |
| 2        | new(매개변수 존재), ..[](프로퍼티 접근), ( )(함수 호출), ?.(옵셔닝 체이닝 연산자) |
| 3        | new(매개변수 미존재)                                                              |
| 4        | x++, x—                                                                           |
| 5        | !x, +x, -x, ++x, —x, typeof, delete                                               |
| 6        | \*\*(이항 연산자 중에서 우선순위가 가장 높다)                                     |
| 7        | \*, /, %                                                                          |
| 8        | +, -                                                                              |
| 9        | <, ≤, >, ≥, in, instanceof                                                        |
| 10       | ==, ≠, ===, ≠=                                                                    |
| 11       | ??(null 병합 연산자)                                                              |
| 12       | &&                                                                                |
| 13       |                                                                                   |     |     |
| 14       | ? … : …                                                                           |
| 15       | 할당 연산자(=, +=, -=, …)                                                         |
| 16       | ,                                                                                 |

### 연산자 결합 순서

| 결합 순서   | 연산자                                                                              |
| ----------- | ----------------------------------------------------------------------------------- | --- | --------------------------------------- |
| 좌항 → 우항 | +, -, /, %, <, ≤, >, ≥, &&,                                                         |     | , ., [ ], ( ), ?? , ?. , in, instanceof |
| 우항 → 좌항 | ++, —, 할당 연산자(=, +=, -=, …), !x, +x, -x, ++x, —x, typeof, delete,? … : …, \*\* |
